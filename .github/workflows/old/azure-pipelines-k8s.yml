name: $(Build.Reason)-$(SourceBranchName)-$(Date:yyyyMMdd)-$(Rev:.r)

trigger:
- main

pool:
  vmImage: 'ubuntu-latest'

variables:
  workingDirectory: '$(System.DefaultWorkingDirectory)/cfg'
  ResourceGroupName: "lab-k8s-rg"
  AksClusterName: lab-k8s-cluster
  #DnsZoneName: "0722d43401b64f9a9185.westeurope.aksapp.io"
  NameSpace: "kuard"
  DeploymentPath: "./deployments/kuard/"
  k8sAzureService: "kuard/kuard-service"
  

steps:
  #Deploy Kuard Application.
- task: AzureCLI@2
  enabled: true
  displayName: 'Deploy $(NameSpace) Application to lab-cluster'
  env:
    ARM_CLIENT_ID: $(ARM_CLIENT_ID)
    ARM_CLIENT_SECRET: $(ARM_CLIENT_SECRET)
    ARM_TENANT_ID: $(ARM_TENANT_ID)
  inputs:
    azureSubscription: "lab-k8s-deploy"
    scriptLocation: 'inlineScript'
    scriptType: 'bash'
    inlineScript: |

      rm -rf deploy && \
      mkdir -p deploy && \
      echo "Created directory [deploy]." || exit 2

      az aks get-credentials \
      --resource-group $(ResourceGroupName) \
      --name $(AksClusterName) \
      --file kubeconfig \
      --admin

      export KUBECONFIG=./kubeconfig

      kubectl create namespace $(NameSpace) --dry-run=client -o yaml | kubectl apply -f -
      kubectl delete secrets --all --namespace $(NameSpace)

      if [ -f $(DeploymentPath)/$(NameSpace)-configmap.yml ]; then 
        kubectl create configmap $(NameSpace)-configmap --from-file=$(DeploymentPath)/$(NameSpace)-configmap.yml --namespace $(NameSpace)
        kubectl apply -f $(DeploymentPath)/$(NameSpace)-configmap.yml --namespace $(NameSpace)
        echo "Created configmap $(NameSpace)-configmap"
      else
        echo "No configmap found."
      fi

      if [ -f $(DeploymentPath)/$(NameSpace)-secret.yml ]; then 
        kubectl create secret generic $(NameSpace)-secret --from-file=$(DeploymentPath)/$(NameSpace)-secret.yml --namespace $(NameSpace)
        echo "Created secret $(NameSpace)-secret"
        kubectl apply -f $(DeploymentPath)/$(NameSpace)-secret.yml --namespace $(NameSpace)
      else
        echo "No secret found."
      fi
      
      kubectl apply -f $(DeploymentPath)/$(NameSpace).yml --namespace $(NameSpace)

- task: AzureCLI@2
  enabled: true
  displayName: "Create DNS Label for $(NameSpace) Application"
  env:
    ARM_CLIENT_ID: $(ARM_CLIENT_ID)
    ARM_CLIENT_SECRET: $(ARM_CLIENT_SECRET)
    ARM_TENANT_ID: $(ARM_TENANT_ID)
  inputs:
    azureSubscription: "lab-k8s-deploy"
    scriptLocation: 'inlineScript'
    scriptType: 'bash'
    inlineScript: |

      echo "Waiting 60 seconds for the application public IP to deploy."
      sleep 1
      

      NodeResourceGroup=$(az aks show -g $(ResourceGroupName) -n $(AksClusterName) --query nodeResourceGroup -o tsv)
      
      
      # Store the IP and tags in an array
      IpList=()
      for IP in $(az network public-ip list -g $NodeResourceGroup --query "[].ipAddress" -o tsv); do
        PublicIPName=$(az network public-ip list -g $NodeResourceGroup --query "[?ipAddress=='$IP'].name" -o tsv)
        TAGS=$(az network public-ip show -g $NodeResourceGroup -n $(az network public-ip list -g $NodeResourceGroup --query "[?ipAddress=='$IP'].name" -o tsv) --query "tags" -o tsv)
        echo "IP and tags $IP: $TAGS"
        IpList+=("$IP $PublicIPName $TAGS")
      done
      
      # Filter the array for the kuard tag and create a new array with the IP and tag 
      for e in "${IpList[@]}"; do 
        List=($e)
        IP=${List[0]}
        PublicIPName=${List[1]}
        TAGS=("${List[@]:2}")

        if printf '%s\n' "${TAGS[@]}" | grep -q -F '$(k8sAzureService)'; then
          FilteredList+=("$IP" "$PublicIPName" "$(NameSpace)")
        fi
      done 

      #echo "FILTERED LIST ${FilteredList[@]}"
      #echo "Only IP ${FilteredList[0]}"
      #echo "IP name ${FilteredList[1]}"
      #echo "TAGS ${FilteredList[2]}"

      
      IpAddress="${FilteredList[0]}"
      PublicIPName="${FilteredList[1]}"
      DnsLabel="${FilteredList[2]}"

      # Create a DNS A record for the public IP address
      #echo "Creating DNS A record for $DNS_LABEL.$ZONE_NAME pointing to $IpAddress"
      #az network dns record-set a add-record \
        #--resource-group $NodeResourceGroup \
        #--zone-name $(DnsZoneName) \
        #--record-set-name $DnsLabel \
        #--ipv4-address $IpAddress
        
      # Update the public IP with the DNS label

      echo "Updating public IP with DNS label $DnsLabel"
      
      
      az network public-ip update \
        --resource-group $NodeResourceGroup \
        --name $PublicIPName \
        --dns-name $DnsLabel
